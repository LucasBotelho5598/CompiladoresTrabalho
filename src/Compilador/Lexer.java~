// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/Compilador/especificacao.flex

package Compilador;

import static Compilador.Token.ASPAS_DUPLAS;
import static Compilador.Token.BRANCO;
import static Compilador.Token.COMENTARIO;
import static Compilador.Token.DECIMAL;
import static Compilador.Token.ERROR;
import static Compilador.Token.INTEIRO;
import static Compilador.Token.NOME_VARIAVEL;
import static Compilador.Token.OPERADORES_ARITMETICOS;
import static Compilador.Token.OPERADORES_COMPARACAO;
import static Compilador.Token.OPERADORES_LOGICOS;
import static Compilador.Token.PALAVRA_CHAVE;
import static Compilador.Token.SIMBOLOS_ESPECIAIS;
import static Compilador.Token.VOGAIS_ACENTOS;

@SuppressWarnings("fallthrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\1\7\1\10\3\6\1\11\1\7"+
    "\1\6\1\12\1\6\1\13\12\14\1\6\1\15\1\16"+
    "\1\17\1\20\2\0\2\21\1\22\10\21\1\23\1\24"+
    "\5\21\1\25\3\21\1\26\3\21\1\27\1\30\1\31"+
    "\1\30\1\21\1\30\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\21\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\6\1\63\1\6"+
    "\7\0\1\3\133\0\1\64\1\0\1\65\5\0\1\64"+
    "\11\0\1\64\6\0\1\64\u0121\0\1\6\13\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\6\1\7\2\10\26\11\1\1\2\12\1\0\1\13"+
    "\1\0\1\10\4\11\1\14\10\11\1\14\7\11\1\14"+
    "\30\11\2\0\15\11\1\0\6\11\2\14\30\11\2\0"+
    "\7\11\1\0\26\11\1\13\1\15\4\11\1\0\15\11"+
    "\1\14\2\11\1\0\6\11\1\14\1\11\1\0\4\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\66\0\66\0\66\0\66\0\242"+
    "\0\330\0\u010e\0\u0144\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252"+
    "\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402"+
    "\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2"+
    "\0\u05e8\0\u061e\0\u0654\0\66\0\u068a\0\u06c0\0\u06f6\0\u072c"+
    "\0\66\0\u0762\0\u0798\0\u07ce\0\u0804\0\u01b0\0\u083a\0\u0870"+
    "\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20"+
    "\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0"+
    "\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80"+
    "\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30"+
    "\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0"+
    "\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290"+
    "\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440"+
    "\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0"+
    "\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0"+
    "\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950"+
    "\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00"+
    "\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0"+
    "\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60"+
    "\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010"+
    "\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\66"+
    "\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a"+
    "\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea"+
    "\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a"+
    "\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\66\0\u27de\0\u2814"+
    "\0\u284a\0\u2880\0\u28b6\0\u28ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\2\7\1\11\1\12\1\6\1\13\2\14\1\15\1\16"+
    "\1\15\1\17\1\20\1\21\1\6\1\2\1\6\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\2\15\1\30\2\15"+
    "\1\31\1\15\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\3\15\1\43\1\44\1\45\67\0"+
    "\2\3\73\0\1\4\66\0\1\46\1\0\1\47\66\0"+
    "\1\12\12\0\1\50\55\0\2\51\64\0\1\51\62\0"+
    "\1\15\4\0\42\15\17\0\1\15\4\0\27\15\1\52"+
    "\12\15\17\0\1\15\4\0\11\15\1\53\30\15\17\0"+
    "\1\15\4\0\33\15\1\54\6\15\17\0\1\15\4\0"+
    "\31\15\1\55\10\15\17\0\1\15\4\0\32\15\1\56"+
    "\7\15\17\0\1\15\4\0\11\15\1\57\15\15\1\60"+
    "\1\15\1\61\10\15\17\0\1\15\4\0\11\15\1\62"+
    "\6\15\1\63\3\15\1\64\2\15\1\65\12\15\17\0"+
    "\1\15\4\0\15\15\1\66\11\15\1\67\12\15\17\0"+
    "\1\15\4\0\26\15\1\70\6\15\1\71\1\15\1\72"+
    "\2\15\17\0\1\15\4\0\11\15\1\73\7\15\1\74"+
    "\5\15\1\75\12\15\17\0\1\15\4\0\16\15\1\56"+
    "\6\15\1\76\1\77\3\15\1\56\7\15\17\0\1\15"+
    "\4\0\27\15\1\100\12\15\17\0\1\15\4\0\11\15"+
    "\1\101\3\15\1\102\16\15\1\103\5\15\17\0\1\15"+
    "\4\0\12\15\1\104\15\15\1\105\3\15\1\106\1\107"+
    "\4\15\17\0\1\15\4\0\11\15\1\110\17\15\1\111"+
    "\2\15\1\112\5\15\17\0\1\15\4\0\15\15\1\113"+
    "\24\15\17\0\1\15\4\0\15\15\1\114\3\15\1\115"+
    "\11\15\1\116\4\15\1\117\1\15\17\0\1\15\4\0"+
    "\20\15\1\120\10\15\1\121\6\15\1\122\1\15\17\0"+
    "\1\15\4\0\26\15\1\123\3\15\1\124\7\15\17\0"+
    "\1\15\4\0\21\15\1\125\5\15\1\126\12\15\17\0"+
    "\1\15\4\0\20\15\1\127\21\15\66\0\1\4\52\0"+
    "\1\44\15\0\11\46\1\130\54\46\2\47\1\0\63\47"+
    "\2\131\2\0\62\131\14\0\1\15\4\0\26\15\1\132"+
    "\13\15\17\0\1\15\4\0\21\15\1\133\20\15\17\0"+
    "\1\15\4\0\31\15\1\134\10\15\17\0\1\15\4\0"+
    "\21\15\1\135\20\15\17\0\1\15\4\0\32\15\1\136"+
    "\7\15\17\0\1\15\4\0\27\15\1\137\12\15\17\0"+
    "\1\15\4\0\15\15\1\140\24\15\17\0\1\15\4\0"+
    "\33\15\1\141\6\15\17\0\1\15\4\0\15\15\1\142"+
    "\24\15\17\0\1\15\4\0\11\15\1\143\30\15\17\0"+
    "\1\15\4\0\26\15\1\144\13\15\17\0\1\15\4\0"+
    "\16\15\1\145\5\15\1\146\15\15\15\0\1\147\1\0"+
    "\1\15\4\0\42\15\17\0\1\15\4\0\34\15\1\150"+
    "\5\15\17\0\1\15\4\0\15\15\1\151\24\15\17\0"+
    "\1\15\4\0\30\15\1\152\2\15\1\153\6\15\17\0"+
    "\1\15\4\0\24\15\1\57\15\15\17\0\1\15\4\0"+
    "\26\15\1\154\10\15\1\155\2\15\17\0\1\15\4\0"+
    "\31\15\1\156\10\15\17\0\1\15\4\0\30\15\1\152"+
    "\11\15\17\0\1\15\4\0\33\15\1\157\6\15\17\0"+
    "\1\15\4\0\13\15\1\160\26\15\17\0\1\15\4\0"+
    "\25\15\1\161\14\15\17\0\1\15\4\0\36\15\1\56"+
    "\3\15\17\0\1\15\4\0\24\15\1\137\15\15\17\0"+
    "\1\15\4\0\22\15\1\162\17\15\17\0\1\15\4\0"+
    "\15\15\1\163\24\15\17\0\1\15\4\0\33\15\1\56"+
    "\6\15\17\0\1\15\4\0\15\15\1\164\24\15\17\0"+
    "\1\15\4\0\31\15\1\165\10\15\17\0\1\15\4\0"+
    "\21\15\1\166\20\15\17\0\1\15\4\0\12\15\1\167"+
    "\27\15\17\0\1\15\4\0\11\15\1\170\4\15\1\56"+
    "\14\15\1\171\6\15\17\0\1\15\4\0\11\15\1\172"+
    "\30\15\17\0\1\15\4\0\41\15\1\173\17\0\1\15"+
    "\4\0\11\15\1\174\17\15\1\175\10\15\17\0\1\15"+
    "\4\0\32\15\1\176\7\15\17\0\1\15\4\0\21\15"+
    "\1\22\7\15\1\177\10\15\17\0\1\15\4\0\34\15"+
    "\1\136\3\15\1\56\1\15\17\0\1\15\4\0\30\15"+
    "\1\173\11\15\17\0\1\15\4\0\13\15\1\200\16\15"+
    "\1\201\7\15\17\0\1\15\4\0\20\15\1\202\1\203"+
    "\20\15\17\0\1\15\4\0\31\15\1\204\10\15\17\0"+
    "\1\15\4\0\21\15\1\205\2\15\1\206\15\15\17\0"+
    "\1\15\4\0\21\15\1\207\20\15\3\0\11\130\1\210"+
    "\54\130\31\0\1\211\50\0\1\15\4\0\32\15\1\212"+
    "\7\15\17\0\1\15\4\0\26\15\1\56\13\15\17\0"+
    "\1\15\4\0\21\15\1\203\20\15\17\0\1\15\4\0"+
    "\33\15\1\213\6\15\17\0\1\15\4\0\15\15\1\56"+
    "\24\15\17\0\1\15\4\0\24\15\1\56\15\15\17\0"+
    "\1\15\4\0\11\15\1\160\30\15\17\0\1\15\4\0"+
    "\13\15\1\214\26\15\17\0\1\15\4\0\13\15\1\215"+
    "\26\15\17\0\1\15\4\0\32\15\1\22\7\15\17\0"+
    "\1\15\4\0\32\15\1\106\1\216\6\15\17\0\1\15"+
    "\4\0\11\15\1\217\30\15\17\0\1\15\4\0\15\15"+
    "\1\220\24\15\62\0\1\221\22\0\1\15\4\0\25\15"+
    "\1\56\14\15\17\0\1\15\4\0\26\15\1\106\13\15"+
    "\17\0\1\15\4\0\24\15\1\222\15\15\17\0\1\15"+
    "\4\0\15\15\1\223\24\15\17\0\1\15\4\0\11\15"+
    "\1\224\30\15\17\0\1\15\4\0\15\15\1\205\24\15"+
    "\17\0\1\15\4\0\15\15\1\225\24\15\17\0\1\15"+
    "\4\0\15\15\1\226\24\15\17\0\1\15\4\0\23\15"+
    "\1\56\16\15\17\0\1\15\4\0\15\15\1\227\24\15"+
    "\17\0\1\15\4\0\15\15\1\230\24\15\17\0\1\15"+
    "\4\0\31\15\1\231\10\15\17\0\1\15\4\0\31\15"+
    "\1\232\10\15\17\0\1\15\4\0\11\15\1\233\30\15"+
    "\17\0\1\15\4\0\35\15\1\234\4\15\17\0\1\15"+
    "\4\0\24\15\1\235\15\15\17\0\1\15\4\0\14\15"+
    "\1\236\25\15\17\0\1\15\4\0\34\15\1\223\5\15"+
    "\17\0\1\15\4\0\24\15\1\155\15\15\17\0\1\15"+
    "\4\0\15\15\1\237\24\15\17\0\1\15\4\0\13\15"+
    "\1\240\17\15\1\235\6\15\17\0\1\15\4\0\34\15"+
    "\1\230\5\15\17\0\1\15\4\0\33\15\1\241\6\15"+
    "\17\0\1\15\4\0\27\15\1\102\12\15\17\0\1\15"+
    "\4\0\20\15\1\63\21\15\17\0\1\15\4\0\11\15"+
    "\1\242\30\15\17\0\1\15\4\0\27\15\1\243\12\15"+
    "\17\0\1\15\4\0\26\15\1\244\13\15\17\0\1\15"+
    "\4\0\33\15\1\245\6\15\17\0\1\15\4\0\14\15"+
    "\1\56\25\15\17\0\1\15\4\0\11\15\1\246\30\15"+
    "\17\0\1\15\4\0\24\15\1\247\15\15\3\0\11\130"+
    "\1\210\1\130\1\250\52\130\14\0\1\251\14\0\1\211"+
    "\50\0\1\15\4\0\27\15\1\252\12\15\17\0\1\15"+
    "\4\0\15\15\1\253\24\15\17\0\1\15\4\0\20\15"+
    "\1\56\21\15\17\0\1\15\4\0\23\15\1\155\16\15"+
    "\17\0\1\15\4\0\21\15\1\254\20\15\17\0\1\15"+
    "\4\0\34\15\1\255\5\15\17\0\1\15\4\0\17\15"+
    "\1\234\22\15\44\0\1\256\40\0\1\15\4\0\21\15"+
    "\1\257\20\15\17\0\1\15\4\0\31\15\1\133\10\15"+
    "\17\0\1\15\4\0\24\15\1\260\15\15\17\0\1\15"+
    "\4\0\11\15\1\141\30\15\17\0\1\15\4\0\31\15"+
    "\1\261\10\15\17\0\1\15\4\0\32\15\1\262\7\15"+
    "\17\0\1\15\4\0\13\15\1\106\26\15\17\0\1\15"+
    "\4\0\11\15\1\263\30\15\17\0\1\15\4\0\31\15"+
    "\1\264\10\15\17\0\1\15\4\0\25\15\1\22\14\15"+
    "\17\0\1\15\4\0\11\15\1\265\30\15\17\0\1\15"+
    "\4\0\21\15\1\266\20\15\17\0\1\15\4\0\27\15"+
    "\1\267\12\15\17\0\1\15\4\0\27\15\1\270\12\15"+
    "\17\0\1\15\4\0\23\15\1\271\16\15\17\0\1\15"+
    "\4\0\15\15\1\150\24\15\17\0\1\15\4\0\16\15"+
    "\1\136\23\15\17\0\1\15\4\0\31\15\1\106\10\15"+
    "\17\0\1\15\4\0\17\15\1\56\22\15\17\0\1\15"+
    "\4\0\34\15\1\272\5\15\17\0\1\15\4\0\33\15"+
    "\1\273\6\15\17\0\1\15\4\0\15\15\1\274\24\15"+
    "\17\0\1\251\65\0\1\15\4\0\24\15\1\136\15\15"+
    "\17\0\1\15\4\0\2\15\1\275\37\15\17\0\1\15"+
    "\4\0\26\15\1\276\13\15\17\0\1\15\4\0\24\15"+
    "\1\106\15\15\45\0\1\277\37\0\1\15\4\0\13\15"+
    "\1\300\26\15\17\0\1\15\4\0\24\15\1\301\15\15"+
    "\17\0\1\15\4\0\16\15\1\302\7\15\1\272\13\15"+
    "\17\0\1\15\4\0\30\15\1\302\11\15\17\0\1\15"+
    "\4\0\33\15\1\303\6\15\17\0\1\15\4\0\21\15"+
    "\1\304\20\15\17\0\1\15\4\0\33\15\1\136\6\15"+
    "\17\0\1\15\4\0\13\15\1\56\26\15\17\0\1\15"+
    "\4\0\26\15\1\260\13\15\17\0\1\15\4\0\16\15"+
    "\1\56\23\15\17\0\1\15\4\0\11\15\1\305\30\15"+
    "\17\0\1\15\4\0\11\15\1\137\30\15\17\0\1\15"+
    "\4\0\21\15\1\252\20\15\17\0\1\15\1\306\3\0"+
    "\42\15\17\0\1\15\4\0\21\15\1\307\20\15\17\0"+
    "\1\15\4\0\34\15\1\136\5\15\50\0\1\310\34\0"+
    "\1\15\4\0\21\15\1\106\20\15\17\0\1\15\4\0"+
    "\40\15\1\56\1\15\17\0\1\15\4\0\11\15\1\311"+
    "\30\15\17\0\1\15\4\0\27\15\1\312\12\15\17\0"+
    "\1\15\4\0\14\15\1\136\25\15\17\0\1\15\4\0"+
    "\24\15\1\313\15\15\17\0\1\15\4\0\26\15\1\136"+
    "\13\15\41\0\1\306\43\0\1\15\4\0\13\15\1\136"+
    "\26\15\17\0\1\15\4\0\31\15\1\56\10\15\17\0"+
    "\1\15\4\0\24\15\1\314\15\15\17\0\1\15\4\0"+
    "\27\15\1\266\12\15\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10530];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\4\11\34\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\11\56\1\2\0\15\1\1\0\40\1"+
    "\2\0\7\1\1\0\26\1\1\11\5\1\1\0\20\1"+
    "\1\0\6\1\1\11\1\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private void imprimir(String token, String lexema) {
        System.out.println(lexema + "==>> " + token);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { imprimir("<<< CARACTER INVALIDO!!!>>> ", yytext()); return ERROR;
            }
          // fall through
          case 14: break;
          case 2:
            { return BRANCO;
            }
          // fall through
          case 15: break;
          case 3:
            { imprimir("OPERADORES LOGICOS : ", yytext()); return OPERADORES_LOGICOS;
            }
          // fall through
          case 16: break;
          case 4:
            { imprimir("ASPAS DUPLAS : ", yytext()); return ASPAS_DUPLAS;
            }
          // fall through
          case 17: break;
          case 5:
            { imprimir("SIMBOLOS ESPECIAIS : ", yytext()); return SIMBOLOS_ESPECIAIS;
            }
          // fall through
          case 18: break;
          case 6:
            { imprimir("OPERADORES_ARITMETICOS : ", yytext()); return OPERADORES_ARITMETICOS;
            }
          // fall through
          case 19: break;
          case 7:
            { imprimir("INTEIRO : ", yytext()); return INTEIRO;
            }
          // fall through
          case 20: break;
          case 8:
            { imprimir("OPERADORES DE COMPRACAO : ", yytext()); return OPERADORES_COMPARACAO;
            }
          // fall through
          case 21: break;
          case 9:
            { imprimir("NOME_VARIAVEL : ", yytext()); return NOME_VARIAVEL;
            }
          // fall through
          case 22: break;
          case 10:
            { imprimir("VOGAIS_ACENTOS : ", yytext()); return VOGAIS_ACENTOS;
            }
          // fall through
          case 23: break;
          case 11:
            { imprimir("COMENTARIO : ", yytext()); return COMENTARIO;
            }
          // fall through
          case 24: break;
          case 12:
            { imprimir("PALAVRA_CHAVE : ", yytext()); return PALAVRA_CHAVE;
            }
          // fall through
          case 25: break;
          case 13:
            { imprimir("DECIMAL : ", yytext()); return DECIMAL;
            }
          // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
